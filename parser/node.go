package parser

// NodeType identifies the type of a parse tree node.
type NodeType string

const (
	NodeGlobal              NodeType = "GLOBAL"
	NodeCall                         = "CALL"
	NodeComment                      = "COMMENT"
	NodeEquation                     = "EQUATION"
	NodeExpression                   = "EXPRESSION"
	NodeIf                           = "IF"
	NodeLiteral                      = "LITERAL"
	NodeNumber                       = "NUMBER"
	NodeOperator                     = "OPERATOR"
	NodeReturn                       = "RETURN"
	NodeString                       = "STRING"
	NodeVariable                     = "VARIABLE"
	NodeVariableDeclarator           = "VARIABLE_DECLARATOR"
	NodeVariableInitializer          = "VARIABLE_INITIALIZER"
)

type Node interface {
	String() string
	ToGolang(indent int) string
	ToC(indent int) string
}

const GolangIndent = 4
const CIndent = 4

const GolangGeneratedCode = `// This code has been autogenerated by the Integra compiler.
package main

import (
	"fmt"
	"log"
	"os"
	"time"
)

func main() {
	write("----- [%s] -----\n", time.Now().Format(time.RFC3339))
	if genesis() != 0 {
		fmt.Printf("Error: genesis() returned a non-zero value.")
	}
}

func print(s string, args ...interface{}) {
	fmt.Printf(s, args...)
}

func write(s string, args ...interface{}) {
	file, err := os.OpenFile("logs/golang.txt", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644)
	if err != nil {
		log.Fatalf("failed opening file: %s", err)
	}
	defer file.Close()

	_, err = file.WriteString(fmt.Sprintf(s, args...))
	if err != nil {
		log.Fatalf("failed writing to file: %s", err)
	}
}`
